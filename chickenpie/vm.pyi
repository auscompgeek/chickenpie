from typing import Iterable, Optional, Tuple

Step = Tuple[int, int]  # next instruction pointer, last opcode


class Machine(Iterable[Step]):
    def __init__(self, input: str = None, code: str = None, bbq_compat: bool = True, input_compat: bool = True) -> None: ...
    def __iter__(self) -> 'Machine': ...
    def __next__(self) -> Step: ...
    next = __next__

    def exec_op(self, opcode: int): ...
    def get_input(self): ...
    def get_output(self): ...
    def has_loaded(self) -> bool: ...
    def is_end(self) -> bool: ...
    def load_file(self, filename: str) -> None: ...
    def load_input(self, inp: str) -> None: ...
    def load_str(self, code: str) -> None: ...
    def look(self): ...
    def next_op(self) -> int: ...
    def peek(self) -> int: ...
    def push(self, val): ...
    def pop(self): ...
    def run(self): ...
    def set(self, addr: int, value): ...
    def step(self) -> Optional[Step]: ...
